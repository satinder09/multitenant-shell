---
description: 
globs: 
alwaysApply: false
---
# Frontend Development (Next.js)

## State Management
- Reset loading states in all async operations (especially logout)
- Handle authentication state properly across route changes
- Use context providers for global state (auth, theme, etc.)
- Implement proper error boundaries for graceful failure handling

## API Integration
- Use consistent API client with proper error handling
- Handle 404/500 errors gracefully with user-friendly messages
- Implement retry logic for transient failures
- Add loading states for all async operations
- Validate API responses before using data
- Update ALL references when changing API route structures
- Use semantic route prefixes to avoid conflicts (e.g., /tenant-access vs /tenants)
- Create corresponding frontend API routes for all backend endpoints

## Routing & Navigation
- Handle middleware redirects carefully to avoid infinite loops
- Use proper route protection for authenticated pages
- Implement proper logout flow with state cleanup
- Handle subdomain routing for multi-tenant access

## TypeScript & Code Quality
- Replace `any` types with proper interfaces and types
- Remove unused imports and variables to prevent build errors
- Use proper JSX escaping for dynamic content
- Implement proper error handling with try-catch blocks
- Add proper TypeScript interfaces for all data structures

## Environment Configuration
- Use `NEXT_PUBLIC_` prefix for client-side environment variables
- Never expose sensitive variables to the client (no `NEXT_PUBLIC_` prefix)
- Use consistent environment variable naming with backend
- Validate environment variables in API routes and components
- Handle missing environment variables gracefully with fallbacks
- Update all hardcoded URLs when changing configuration
- Test with different domain/port configurations for flexibility

## Component & UI Development
- ALWAYS check existing user-defined components first before creating new ones
- Use `@/components/ui-kit/` components for complex UI patterns (DataTable, DialogForm, etc.)
- Use `@/components/ui/` components for basic UI elements (Button, Input, Card, etc.)
- Use `@/utils/ui/` utilities for common UI operations (dialogs, sheets, toasts, etc.)
- Check `@/components/` for existing business logic components before duplicating
- Extend existing components rather than creating similar ones from scratch
- Follow established patterns in existing user-defined components
- Document new components if they don't fit existing patterns
- Use consistent naming conventions with existing component library
- Leverage existing TypeScript interfaces from user-defined components


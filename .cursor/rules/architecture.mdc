---
description: 
globs: 
alwaysApply: false
---
# Architecture & Design Patterns

## Multi-Tenant Database Strategy
- Master Database: Contains users, tenants, and tenant metadata
- Tenant Databases: Isolated per-tenant databases for data security
- Always validate tenant context before database operations
- Use tenant middleware to resolve tenant from subdomain/headers
- Never mix master and tenant data in the same database

## Route Design & Ordering
- Specific routes MUST come before parameterized routes in NestJS controllers
- Route conflicts are common - always test route precedence
- Use descriptive route names that clearly indicate purpose
- Group related endpoints logically (e.g., all tenant access in one controller)
- Avoid multiple controllers with same prefix - use unique controller paths
- Check for controller conflicts when routes return unexpected 404s
- Use semantic controller prefixes (e.g., 'tenant-access' vs 'tenants')


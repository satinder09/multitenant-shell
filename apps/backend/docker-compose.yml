# ===============================================
# ðŸš€ MULTITENANT SHELL - PRODUCTION COMPOSE
# ===============================================
# Production-ready Docker Compose with all services
# Includes database, cache, monitoring, and backup

version: '3.8'

# =============================================
# SHARED NETWORKS
# =============================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
  database-network:
    driver: bridge
    internal: true  # Database network is internal for security

# =============================================
# SHARED VOLUMES
# =============================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  logs-data:
    driver: local
  uploads-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =============================================
# SERVICES
# =============================================
services:
  # =============================================
  # APPLICATION SERVICE
  # =============================================
  multitenant-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
        VERSION: ${VERSION:-1.0.0}
    container_name: multitenant-backend
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-multitenant_master}?schema=public}
      
      # Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_LIMIT: ${RATE_LIMIT_LIMIT:-100}
      
      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_HEALTH_CHECK: ${ENABLE_HEALTH_CHECK:-true}
      
      # File uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_PATH: /app/uploads
      
    ports:
      - "${APP_PORT:-3000}:3000"
    
    volumes:
      - logs-data:/app/logs
      - uploads-data:/app/uploads
    
    networks:
      - app-network
      - database-network
      - monitoring-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"

  # =============================================
  # DATABASE SERVICE (PostgreSQL)
  # =============================================
  postgres:
    image: postgres:16-alpine
    container_name: multitenant-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-multitenant_master}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    networks:
      - database-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-multitenant_master}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    command: [
      "postgres",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.7",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB",
      "-c", "log_statement=error",
      "-c", "log_min_duration_statement=1000"
    ]

  # =============================================
  # CACHE SERVICE (Redis)
  # =============================================
  redis:
    image: redis:7-alpine
    container_name: multitenant-redis
    restart: unless-stopped
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "512mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000"
    ]
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    volumes:
      - redis-data:/data
    
    networks:
      - app-network
      - monitoring-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # =============================================
  # REVERSE PROXY (Traefik)
  # =============================================
  traefik:
    image: traefik:v3.0
    container_name: multitenant-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--metrics.prometheus=true"
    
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/acme.json:/acme.json
    
    networks:
      - app-network
      - monitoring-network
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  # =============================================
  # MONITORING - PROMETHEUS
  # =============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: multitenant-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - monitoring-network
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s

  # =============================================
  # MONITORING - GRAFANA
  # =============================================
  grafana:
    image: grafana/grafana:latest
    container_name: multitenant-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - monitoring-network
    
    depends_on:
      - prometheus
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================
  # BACKUP SERVICE
  # =============================================
  backup:
    image: prodrigestivill/postgres-backup-local:16
    container_name: multitenant-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-multitenant_master}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_EXTRA_OPTS: "-Z6 --schema=public --blobs"
      SCHEDULE: "${BACKUP_SCHEDULE:-@daily}"
      BACKUP_KEEP_DAYS: ${BACKUP_KEEP_DAYS:-7}
      BACKUP_KEEP_WEEKS: ${BACKUP_KEEP_WEEKS:-4}
      BACKUP_KEEP_MONTHS: ${BACKUP_KEEP_MONTHS:-6}
      HEALTHCHECK_PORT: 8080
    
    volumes:
      - ./backups:/backups
    
    networks:
      - database-network
    
    depends_on:
      postgres:
        condition: service_healthy

  # =============================================
  # LOG AGGREGATION (Optional)
  # =============================================
  loki:
    image: grafana/loki:latest
    container_name: multitenant-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    
    networks:
      - monitoring-network
    
    command: -config.file=/etc/loki/local-config.yaml

  # =============================================
  # DEVELOPMENT OVERRIDE (Optional)
  # =============================================
  multitenant-backend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: multitenant-backend-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-multitenant_master}?schema=public
      REDIS_URL: redis://redis:6379
    
    ports:
      - "${DEV_APP_PORT:-3000}:3000"
      - "${DEV_DEBUG_PORT:-9229}:9229"
    
    volumes:
      - .:/app
      - /app/node_modules
      - logs-data:/app/logs
    
    networks:
      - app-network
      - database-network
    
    profiles:
      - development
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

generator masterClient {
  provider = "prisma-client-js"
  output   = "../generated/master-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String   @id @default(cuid())
  name           String
  subdomain      String   @unique
  dbName         String   @unique
  encryptedDbUrl String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  permissions TenantUserPermission[]
  impersonationSessions ImpersonationSession[]
  accessLogs TenantAccessLog[]
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 2FA Support - Extensible for multiple methods
  twoFactorEnabled     Boolean  @default(false)
  twoFactorBackupCodes String[] // Encrypted backup codes

  permissions TenantUserPermission[]
  initiatedImpersonations ImpersonationSession[] @relation("OriginalUser")
  accessLogs TenantAccessLog[]
  userRoles UserRole[]
  twoFactorMethods TwoFactorMethod[]
}

// Extensible 2FA Methods Model
model TwoFactorMethod {
  id            String              @id @default(cuid())
  userId        String
  methodType    TwoFactorMethodType
  isEnabled     Boolean             @default(false)
  isPrimary     Boolean             @default(false)
  
  // Method-specific data (encrypted)
  secretData    String? // TOTP secret, SMS phone number, etc.
  
  // Metadata
  name          String? // User-friendly name
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastUsedAt    DateTime?
  
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Audit trail
  auditLogs     TwoFactorAuditLog[]

  @@unique([userId, methodType])
}

model TwoFactorAuditLog {
  id              String           @id @default(cuid())
  methodId        String
  action          TwoFactorAction
  success         Boolean
  ipAddress       String?
  userAgent       String?
  metadata        Json?
  timestamp       DateTime         @default(now())
  
  method          TwoFactorMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)
}

model TenantUserPermission {
  userId   String
  tenantId String
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([userId, tenantId])
}

model ImpersonationSession {
  id                    String   @id @default(cuid())
  sessionId             String   @unique
  originalUserId        String
  originalTenantId      String?
  impersonatedUserId    String
  impersonatedTenantId  String
  startedAt             DateTime @default(now())
  expiresAt             DateTime
  endedAt               DateTime?
  reason                String
  status                ImpersonationStatus @default(ACTIVE)
  
  originalUser          User     @relation("OriginalUser", fields: [originalUserId], references: [id], onDelete: Cascade)
  impersonatedTenant    Tenant   @relation(fields: [impersonatedTenantId], references: [id], onDelete: Cascade)
  
  auditLogs             ImpersonationAuditLog[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ImpersonationAuditLog {
  id                    String   @id @default(cuid())
  impersonationSessionId String
  action                String
  details               Json?
  timestamp             DateTime @default(now())
  
  impersonationSession  ImpersonationSession @relation(fields: [impersonationSessionId], references: [id], onDelete: Cascade)
}

model TenantAccessLog {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  accessType  AccessType
  reason      String?
  startedAt   DateTime @default(now())
  expiresAt   DateTime
  endedAt     DateTime?
  ipAddress   String?
  userAgent   String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
}

enum ImpersonationStatus {
  ACTIVE
  ENDED
  EXPIRED
  REVOKED
}

enum AccessType {
  SECURE_LOGIN
  IMPERSONATION
  DIRECT_ACCESS
}

// 2FA Enums for extensibility
enum TwoFactorMethodType {
  TOTP          // Time-based One-Time Password (Google Authenticator, etc.)
  SMS           // SMS-based OTP
  EMAIL         // Email-based OTP
  WEBAUTHN      // WebAuthn/FIDO2 (Hardware keys, biometric)
  BACKUP_CODES  // Backup recovery codes
}

enum TwoFactorAction {
  SETUP
  ENABLE
  DISABLE
  VERIFY_SUCCESS
  VERIFY_FAILURE
  BACKUP_USED
  RESET
  DELETE
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  userRoles   UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  rolePermissions RolePermission[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}
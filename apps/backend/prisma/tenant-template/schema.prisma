generator tenantClient {
  provider = "prisma-client-js"
  output   = "../../generated/tenant-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  passwordHash     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  
  // 2FA Support - Extensible for multiple methods (replaces old fields)
  twoFactorEnabled     Boolean  @default(false)
  twoFactorBackupCodes String[] // Encrypted backup codes
  
  sessions         Session[]
  refreshTokens    RefreshToken[]
  userRoles        UserRole[]
  twoFactorMethods TwoFactorMethod[]
}

// Extensible 2FA Methods Model (same as platform)
model TwoFactorMethod {
  id            String              @id @default(cuid())
  userId        String
  methodType    TwoFactorMethodType
  isEnabled     Boolean             @default(false)
  isPrimary     Boolean             @default(false)
  
  // Method-specific data (encrypted)
  secretData    String? // TOTP secret, SMS phone number, etc.
  
  // Metadata
  name          String? // User-friendly name
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastUsedAt    DateTime?
  
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Audit trail
  auditLogs     TwoFactorAuditLog[]

  @@unique([userId, methodType])
}

model TwoFactorAuditLog {
  id              String           @id @default(cuid())
  methodId        String
  action          TwoFactorAction
  success         Boolean
  ipAddress       String?
  userAgent       String?
  metadata        Json?
  timestamp       DateTime         @default(now())
  
  method          TwoFactorMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)
}

// 2FA Enums for extensibility
enum TwoFactorMethodType {
  TOTP          // Time-based One-Time Password (Google Authenticator, etc.)
  SMS           // SMS-based OTP
  EMAIL         // Email-based OTP
  WEBAUTHN      // WebAuthn/FIDO2 (Hardware keys, biometric)
  BACKUP_CODES  // Backup recovery codes
}

enum TwoFactorAction {
  SETUP
  ENABLE
  DISABLE
  VERIFY_SUCCESS
  VERIFY_FAILURE
  BACKUP_USED
  RESET
  DELETE
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  rolePermissions RolePermission[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model RefreshToken {
  id         String   @id @default(cuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  revoked    Boolean  @default(false)
  replacedBy String?
}
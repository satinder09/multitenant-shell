generator tenantClient {
  provider = "prisma-client-js"
  output   = "../../generated/tenant-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  passwordHash     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  twoFactorEnabled Boolean          @default(false)
  twoFactorSecret  String?
  sessions         Session[]
  refreshTokens    RefreshToken[]
  userRoles        UserRole[]
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  rolePermissions RolePermission[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model RefreshToken {
  id         String   @id @default(cuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  revoked    Boolean  @default(false)
  replacedBy String?
}
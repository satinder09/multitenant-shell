// apps/backend/src/modules/auth/auth.controller.ts

import {
  Controller,
  Post,
  Get,
  Body,
  Req,
  Res,
  UseGuards,
  HttpCode,
  HttpStatus,
  UnauthorizedException,
} from '@nestjs/common';
import { Request, Response } from 'express';
import { TenantContext } from '../prisma-tenant/tenant-context';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';
import { LoginResponse } from './interfaces/login-response.interface';
import { JwtAuthGuard } from './jwt-auth.guard';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  /** Issue a new JWT (in HttpOnly cookie) */
  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(
    @Body() dto: LoginDto,
    @TenantContext() tenant: { id: string; databaseUrl: string } | undefined,
    @Res({ passthrough: true }) res: Response,
  ): Promise<LoginResponse> {
    const { accessToken } = await this.authService.login(dto, tenant?.id);

    res.cookie('Authentication', accessToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 1000 * 60 * 60, // 1h in ms
    });

    return { accessToken };
  }

  /** Return the current user (validated from the cookie) */
  @Get('me')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  me(@Req() req: Request) {
    const user = req.user;
    if (!user) {
      throw new UnauthorizedException();
    }
    return user;
  }

  /** Get CSRF token */
  @Get('csrf-token')
  @HttpCode(HttpStatus.OK)
  getCsrfToken(@Req() req: Request, @Res({ passthrough: true }) res: Response) {
    // The CSRF token is generated by the middleware and available as req.csrfToken()
    const token = (req as any).csrfToken?.();
    if (token) {
      res.setHeader('X-CSRF-Token', token);
      return { csrfToken: token };
    }
    return { csrfToken: null };
  }

  /** Clear the JWT cookie */
  @Post('logout')
  @HttpCode(HttpStatus.OK)
  async logout(@Res({ passthrough: true }) res: Response) {
    const baseDomain = process.env.BASE_DOMAIN || 'lvh.me';
    // Log for debugging
    console.log(`Clearing Authentication cookie for .${baseDomain}, ${baseDomain}, /`);
    res.clearCookie('Authentication', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      domain: `.${baseDomain}`,
      path: '/',
    });
    res.clearCookie('Authentication', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      domain: baseDomain,
      path: '/',
    });
    res.clearCookie('Authentication', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      path: '/',
    });
    res.clearCookie('Authentication');
    return { success: true };
  }
}

# ===============================================
# 🚀 MULTITENANT SHELL - CI/CD PIPELINE
# ===============================================
# Automated deployment pipeline for MultiTenant Shell
# Supports: development, staging, and production environments

name: 🚀 Deploy MultiTenant Shell

on:
  push:
    branches: [ main, develop, backend-restructure ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =============================================
  # CODE QUALITY & TESTING
  # =============================================
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json
      
      - name: 📦 Install dependencies
        working-directory: apps/backend
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔍 Lint code
        working-directory: apps/backend
        run: npm run lint
      
      - name: 🧪 Run unit tests
        working-directory: apps/backend
        run: npm test -- --coverage --watchAll=false
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
      
      - name: 🧪 Run E2E tests
        working-directory: apps/backend
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
      
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: apps/backend/coverage
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # =============================================
  # SECURITY SCANNING
  # =============================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json
      
      - name: 📦 Install dependencies
        working-directory: apps/backend
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔍 Run security audit
        working-directory: apps/backend
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: 🔒 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript
      
      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: apps/backend --severity-threshold=high
        continue-on-error: true

  # =============================================
  # BUILD & CONTAINERIZATION
  # =============================================
  build:
    name: 🏗️ Build & Containerize
    runs-on: ubuntu-latest
    needs: [test, security]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          file: apps/backend/Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.created }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================
  # DEVELOPMENT DEPLOYMENT
  # =============================================
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to development
        run: |
          echo "Deploying to development environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment logic here

  # =============================================
  # STAGING DEPLOYMENT
  # =============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/backend-restructure'
    environment: staging
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment logic here

  # =============================================
  # PRODUCTION DEPLOYMENT
  # =============================================
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment logic here
      
      - name: 📧 Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: success()
      
      - name: 📧 Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  # =============================================
  # POST-DEPLOYMENT VERIFICATION
  # =============================================
  verify:
    name: ✅ Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Health check
        run: |
          echo "Running post-deployment health checks..."
          # Add health check logic here
      
      - name: 🧪 Smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test logic here
      
      - name: 📊 Performance benchmark
        run: |
          echo "Running performance benchmarks..."
          # Add performance test logic here

  # =============================================
  # CLEANUP
  # =============================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [verify]
    if: always()
    
    steps:
      - name: 🧹 Clean up old images
        run: |
          echo "Cleaning up old container images..."
          # Add cleanup logic here 